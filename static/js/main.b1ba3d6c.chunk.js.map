{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomInt","max","Math","floor","random","getProblem","divisor","quotient","dividend","App","useState","numberCorrect","setNumberCorrect","numberWrong","setNumberWrong","currentProblem","setCurrentProblem","answers","useMemo","Set","add","size","Array","from","sort","a","b","guessedAnswer","setGuessedAnswer","guess","answer","window","setTimeout","guessCorrect","className","style","display","flex","flexDirection","alignItems","justifyContent","fontSize","padding","marginTop","borderBottom","width","color","borderLeft","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAIA,SAASA,EAAaC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAG/C,SAASI,EAAWJ,GAClB,IAAMK,EAAUN,EAAaC,GAAO,EAC9BM,EAAWP,EAAaC,GAAO,EAErC,MAAO,CACLK,UACAC,WACAC,SAJeF,EAAUC,GAkLdE,MA1Kf,WACE,IADa,EAE6BC,mBAAS,GAFtC,mBAENC,EAFM,KAESC,EAFT,OAGyBF,mBAAS,GAHlC,mBAGNG,EAHM,KAGOC,EAHP,OAK+BJ,mBAASL,EAJnC,IADL,mBAKNU,EALM,KAKUC,EALV,KAOPC,EAAUC,mBAAQ,WACtB,IAAMD,EAAU,IAAIE,IAEpB,IADAF,EAAQG,IAAIL,EAAeR,UACpBU,EAAQI,KAAO,GACpBJ,EAAQG,IAAIpB,EAVE,GAUwB,GAExC,OAAOsB,MAAMC,KAAKN,GAASO,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,OAC7C,CAACX,IACIP,EAAgCO,EAAhCP,SAAUF,EAAsBS,EAAtBT,QAASC,EAAaQ,EAAbR,SAfd,EAiB6BG,mBAAwB,MAjBrD,mBAiBNiB,EAjBM,KAiBSC,EAjBT,KAmBPC,EAAQ,SAACC,GACbF,EAAiBE,GACbA,IAAWvB,GACS,OAAlBoB,GACFf,EAAiBD,EAAgB,GAEnCoB,OAAOC,YAAW,WAChBJ,EAAiB,MACjBZ,EAAkBX,EA1BN,MA2BX,MAEHS,EAAeD,EAAc,IAI3BoB,EAAeN,IAAkBpB,EAEvC,OACE,sBAAK2B,UAAU,MAAf,UACE,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,KAAM,GAArC,UACE,sBACEF,MAAO,CACLC,QAAS,OACTE,cAAe,SACfD,KAAM,EACNE,WAAY,WACZC,eAAgB,YANpB,UASE,qBAAKL,MAAO,CAAEE,KAAM,KACpB,qBAAKF,MAAO,CAAEE,KAAM,EAAGI,SAAU,GAAIC,QAAS,EAAGC,UAAW,IAA5D,SACGrC,IAEH,qBAAK6B,MAAO,CAAEE,KAAM,QAEtB,sBACEF,MAAO,CACLC,QAAS,OACTC,KAAM,EACNC,cAAe,SACfE,eAAgB,SAChBD,WAAY,cANhB,UASE,qBACEJ,MAAO,CACLE,KAAM,EACNI,SAAU,GACVL,QAAS,OACTG,WAAY,WACZK,aAAc,kBACdF,QAAS,EACTG,MAAO,MACPC,MACoB,OAAlBnB,EACI,OACAM,EACA,QACA,OAdV,SAiBGN,GAAiB,MAEpB,sBAAKQ,MAAO,CAAEE,KAAM,EAAGD,QAAS,OAAQE,cAAe,UAAvD,UACE,qBACEH,MAAO,CACLO,QAAS,EACTL,KAAM,OACNU,WAAY,kBACZN,SAAU,IALd,SAQGjC,IAEH,qBAAK2B,MAAO,CAAEE,KAAM,QAGtB,qBAAKF,MAAO,CAAEE,KAAM,WAGxB,sBACEF,MAAO,CACLC,QAAS,OACTE,cAAe,SACfD,KAAM,EACNG,eAAgB,UAChBD,WAAY,SACZM,MAAO,QAPX,UAUE,sBAAKV,MAAO,CAAEC,QAAS,OAAQC,KAAM,EAAGQ,MAAO,QAA/C,UACE,wBACEV,MAAO,CAAEU,MAAO,MAAOJ,SAAU,IACjCO,QAAS,WACFf,GACHJ,EAAMZ,EAAQ,KAJpB,SAQGA,EAAQ,KAEX,wBACEkB,MAAO,CAAEU,MAAO,MAAOJ,SAAU,IACjCO,QAAS,WACFf,GACHJ,EAAMZ,EAAQ,KAJpB,SAQGA,EAAQ,QAGb,sBAAKkB,MAAO,CAAEC,QAAS,OAAQC,KAAM,EAAGQ,MAAO,QAA/C,UACE,wBACEV,MAAO,CAAEU,MAAO,MAAOJ,SAAU,IACjCO,QAAS,WACFf,GACHJ,EAAMZ,EAAQ,KAJpB,SAQGA,EAAQ,KAEX,wBACEkB,MAAO,CAAEU,MAAO,MAAOJ,SAAU,IACjCO,QAAS,WACFf,GACHJ,EAAMZ,EAAQ,KAJpB,SAQGA,EAAQ,WAIf,sBACEkB,MAAO,CACLC,QAAS,OACTE,cAAe,SACfD,KAAM,EACNE,WAAY,SACZC,eAAgB,gBANpB,UASE,mDAAsB7B,KACtB,iDAAoBE,YCzKboC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b1ba3d6c.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction getProblem(max: number) {\n  const divisor = getRandomInt(max) + 1;\n  const quotient = getRandomInt(max) + 1;\n  const dividend = divisor * quotient;\n  return {\n    divisor,\n    quotient,\n    dividend,\n  };\n}\n\nfunction App() {\n  const maxNumber = 9;\n  const [numberCorrect, setNumberCorrect] = useState(0);\n  const [numberWrong, setNumberWrong] = useState(0);\n\n  const [currentProblem, setCurrentProblem] = useState(getProblem(maxNumber));\n\n  const answers = useMemo(() => {\n    const answers = new Set<number>();\n    answers.add(currentProblem.quotient);\n    while (answers.size < 4) {\n      answers.add(getRandomInt(maxNumber) + 1);\n    }\n    return Array.from(answers).sort((a, b) => a - b);\n  }, [currentProblem]);\n  const { dividend, divisor, quotient } = currentProblem;\n\n  const [guessedAnswer, setGuessedAnswer] = useState<number | null>(null);\n\n  const guess = (answer: number) => {\n    setGuessedAnswer(answer);\n    if (answer === quotient) {\n      if (guessedAnswer === null) {\n        setNumberCorrect(numberCorrect + 1);\n      }\n      window.setTimeout(() => {\n        setGuessedAnswer(null);\n        setCurrentProblem(getProblem(maxNumber));\n      }, 1000);\n    } else {\n      setNumberWrong(numberWrong + 1);\n    }\n  };\n\n  const guessCorrect = guessedAnswer === quotient;\n\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"flex\", flex: 1 }}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            flex: 1,\n            alignItems: \"flex-end\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <div style={{ flex: 1 }}></div>\n          <div style={{ flex: 1, fontSize: 32, padding: 6, marginTop: 19 }}>\n            {divisor}\n          </div>\n          <div style={{ flex: 1 }}></div>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flex: 1,\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"flex-start\",\n          }}\n        >\n          <div\n            style={{\n              flex: 1,\n              fontSize: 32,\n              display: \"flex\",\n              alignItems: \"flex-end\",\n              borderBottom: \"1px solid black\",\n              padding: 6,\n              width: \"20%\",\n              color:\n                guessedAnswer === null\n                  ? \"gray\"\n                  : guessCorrect\n                  ? \"green\"\n                  : \"red\",\n            }}\n          >\n            {guessedAnswer || \"?\"}\n          </div>\n          <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\" }}>\n            <div\n              style={{\n                padding: 6,\n                flex: \"none\",\n                borderLeft: \"1px solid black\",\n                fontSize: 32,\n              }}\n            >\n              {dividend}\n            </div>\n            <div style={{ flex: 1 }}></div>\n          </div>\n\n          <div style={{ flex: 1 }}></div>\n        </div>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          flex: 1,\n          justifyContent: \"stretch\",\n          alignItems: \"center\",\n          width: \"100%\",\n        }}\n      >\n        <div style={{ display: \"flex\", flex: 1, width: \"100%\" }}>\n          <button\n            style={{ width: \"50%\", fontSize: 24 }}\n            onClick={() => {\n              if (!guessCorrect) {\n                guess(answers[0]);\n              }\n            }}\n          >\n            {answers[0]}\n          </button>\n          <button\n            style={{ width: \"50%\", fontSize: 24 }}\n            onClick={() => {\n              if (!guessCorrect) {\n                guess(answers[1]);\n              }\n            }}\n          >\n            {answers[1]}\n          </button>\n        </div>\n        <div style={{ display: \"flex\", flex: 1, width: \"100%\" }}>\n          <button\n            style={{ width: \"50%\", fontSize: 24 }}\n            onClick={() => {\n              if (!guessCorrect) {\n                guess(answers[2]);\n              }\n            }}\n          >\n            {answers[2]}\n          </button>\n          <button\n            style={{ width: \"50%\", fontSize: 24 }}\n            onClick={() => {\n              if (!guessCorrect) {\n                guess(answers[3]);\n              }\n            }}\n          >\n            {answers[3]}\n          </button>\n        </div>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          flex: 1,\n          alignItems: \"center\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <div>Nubmer correct: {numberCorrect}</div>\n        <div>Number wrong: {numberWrong}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
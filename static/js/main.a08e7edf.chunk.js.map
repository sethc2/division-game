{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomInt","max","Math","floor","random","getProblem","divisor","quotient","dividend","Problem","children","className","Answers","answers","guess","style","height","width","onClick","Results","numberCorrect","numberWrong","display","flexDirection","alignItems","justifyContent","App","useState","setNumberCorrect","setNumberWrong","currentProblem","setCurrentProblem","useMemo","Set","add","size","Array","from","sort","a","b","guessedAnswer","setGuessedAnswer","guessCorrect","color","answer","window","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a08e7edf.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction getProblem(max: number) {\n  const divisor = getRandomInt(max) + 1;\n  const quotient = getRandomInt(max) + 1;\n  const dividend = divisor * quotient;\n  return {\n    divisor,\n    quotient,\n    dividend,\n  };\n}\n\nfunction App() {\n  const maxNumber = 9;\n  const [numberCorrect, setNumberCorrect] = useState(0);\n  const [numberWrong, setNumberWrong] = useState(0);\n\n  const [currentProblem, setCurrentProblem] = useState(getProblem(maxNumber));\n\n  const answers = useMemo(() => {\n    const answers = new Set<number>();\n    answers.add(currentProblem.quotient);\n    while (answers.size < 4) {\n      answers.add(getRandomInt(maxNumber) + 1);\n    }\n    return Array.from(answers).sort((a, b) => a - b) as [\n      number,\n      number,\n      number,\n      number\n    ];\n  }, [currentProblem]);\n  const { dividend, divisor, quotient } = currentProblem;\n\n  const [guessedAnswer, setGuessedAnswer] = useState<number | null>(null);\n\n  const guess = (answer: number) => {\n    setGuessedAnswer(answer);\n    if (answer === quotient) {\n      if (guessedAnswer === null) {\n        setNumberCorrect(numberCorrect + 1);\n      }\n      window.setTimeout(() => {\n        setGuessedAnswer(null);\n        setCurrentProblem(getProblem(maxNumber));\n      }, 1000);\n    } else {\n      setNumberWrong(numberWrong + 1);\n    }\n  };\n\n  const guessCorrect = guessedAnswer === quotient;\n\n  return (\n    <div className=\"App\">\n      <Problem>\n        <>\n          <span>{dividend}</span>\n          <span>รท</span>\n          <span>{divisor}</span>\n          <span>=</span>\n          <span\n            style={{\n              color:\n                guessedAnswer === null\n                  ? \"gray\"\n                  : guessCorrect\n                  ? \"green\"\n                  : \"red\",\n            }}\n          >\n            {guessedAnswer || \"?\"}\n          </span>\n        </>\n      </Problem>\n      <Answers answers={answers} guess={guess}></Answers>\n      <Results\n        numberCorrect={numberCorrect}\n        numberWrong={numberWrong}\n      ></Results>\n    </div>\n  );\n}\n\nconst Problem: React.FC<{}> = ({ children }) => {\n  return <div className=\"problem\">{children}</div>;\n};\n\nconst Answers: React.FC<{\n  answers: [number, number, number, number];\n  guess: (value: number) => void;\n}> = ({ answers, guess }) => {\n  return (\n    <div className=\"answers\">\n      <div style={{ height: \"50%\", width: \"100%\" }}>\n        <button onClick={() => guess(answers[0])}>{answers[0]}</button>\n        <button onClick={() => guess(answers[1])}>{answers[1]}</button>\n      </div>\n      <div style={{ height: \"50%\", width: \"100%\" }}>\n        <button onClick={() => guess(answers[2])}>{answers[2]}</button>\n        <button onClick={() => guess(answers[3])}>{answers[3]}</button>\n      </div>\n    </div>\n  );\n};\n\nconst Results: React.FC<{ numberCorrect: number; numberWrong: number }> = ({\n  numberCorrect,\n  numberWrong,\n}) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"100%\",\n        height: \"33.33%\",\n        alignItems: \"center\",\n        justifyContent: \"space-evenly\",\n      }}\n    >\n      <div>Nubmer correct: {numberCorrect}</div>\n      <div>Number wrong: {numberWrong}</div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}